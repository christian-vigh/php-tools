#!/usr/bin/php
<?php
	/**************************************************************************************************************
	
	    NAME
	        randomtest.phs
	
	    DESCRIPTION
	        Creates a table, inserts random records, then tries different algorithms for randomly selecting records.
	
	    AUTHOR
	        Christian Vigh, 01/2014.
	
	    HISTORY
	    [Version : 1.0]    [Date : 2014/01/07]     [Author : CV]
	        Initial version.
	
	 **************************************************************************************************************/

	require ( "../../Bin/tools.phpinclude" ) ;
	
	use  Thrak\Processors\CL\CLParser ;
	use  Thrak\Types\String ;
	use  Thrak\IO\Path ;
	use  Thrak\System\Timer ;
	use  Thrak\System\Benchmark ;

	
	/*==============================================================================================================
	
	    Command-line definitions.
	
	  ==============================================================================================================*/
	$Definitions	=<<<END
<command name="randomtest">
	<usage>
		Creates a table, inserts random records, then tries different algorithms for randomly selecting records.
	</usage>
	
	<string name="hostname, host, h" default="localhost">
		Hostname of the MySQL server.
	</string>
	
	<string name="username, user, u" default="root">
		User name used for connecting to the MySQL server.
	</string>
	
	<string name="password, pwd, p" default="">
		User password.
	</string>
	
	<string name="database, db, d" default="thrak">
		Default database to select.
	</string>
	
	<integer name="limit, l" default="1">
		Specifies the number of rows to be retrieved by a random query.
	</integer>
	
	<flag name="recreate_tables, reset_tables, rt, rs, r">
		When specified, the test tables are rebuilt and repopulated.
	</flag>
	
	<integer name="record_count, rc" default="100000">
		When the -recreate option is specified, indicates the number of random records to create.
	</integer>

	<integer name="select_count, sc" default="1000">
		Specifies the number of records that will be randomly selected and timed.
	</integer>	
</command>
END;


	/*==============================================================================================================

	    SafeQuery -
		Executes a query and terminates the program upon error.

	  ==============================================================================================================*/
	function  SafeQuery ( $query )
	   {
		global		$MySqli ;
		
		$result		=  $MySqli -> query ( $query ) ;
		
		if  ( $MySqli -> errno )
			error ( "SQL query error #" . $MySqli -> errno . ' : ' . $MySqli -> error ) ;
			
		return ( $result ) ;
	    }
	    
	  
	/*==============================================================================================================

	    SafeStart -
		Tries to make MySql as cold as if had been restarted.

	  ==============================================================================================================*/
	function  SafeStart ( )
	   {
		SafeQuery ( "FLUSH TABLES" ) ;
		SafeQuery ( "FLUSH PRIVILEGES" ) ;
	    }

	    
	/*==============================================================================================================

	    GetRecordCount -
		Gets the record count from a table.

	  ==============================================================================================================*/
	function  GetRecordCount ( $table )
	   {
		$result	=  SafeQuery ( "SELECT COUNT(*) AS  'count' FROM $table" ) -> fetch_assoc ( ) ;
		
		return ( $result [ 'count' ] ) ;
	    }
	
	  
	/*==============================================================================================================

	    RecreateTables -
		Recreates the tables needed to run the benchmark.

	  ==============================================================================================================*/
	function  RecreateTables ( )
	   {
		global  $Timer, $MySqli, $RecordCount ;
		
		
		// Standard tables - First, drop
		SafeQuery ( "DROP TABLE IF EXISTS random_table" ) ;
		
		// Standard tables - Recreate
		SafeQuery
		   (
			"
				CREATE TABLE random_table
				   (
					id		INT 		NOT NULL AUTO_INCREMENT,
					created		TIMESTAMP	NOT NULL DEFAULT CURRENT_TIMESTAMP,
					access_count	INT		NOT NULL DEFAULT 0,
					text		VARCHAR(255)	NOT NULL DEFAULT '',
					
					PRIMARY KEY ( id )
				    ) ENGINE = MyISAM CHARSET latin1 ;			
		         "
		    ) ;
		    
		// Standard tables - Insert $RecordCount records
		for  ( $i = 0 ; $i < $RecordCount ; $i ++ )
		   {
			SafeQuery ( "INSERT INTO random_table ( text ) VALUES ( '" . md5 ( rand ( 0, PHP_INT_MAX ) ) . "' )" ) ;
		    }
		    
		// Add indexes
		SafeQuery ( "ALTER TABLE random_table ADD INDEX ( access_count, id )" ) ;
		    
		// Standard tables - Optimize
		SafeQuery ( "OPTIMIZE TABLE random_table" ) ;
		    
		$Timer -> Step ( "Recreate tables with $RecordCount records." ) ;
	    }

	    
	/*==============================================================================================================

	    RandomOrderByRand -
		Times execution of :
		
		SELECT ... ORDER BY RAND() LIMIT 1

	  ==============================================================================================================*/
	 function  __RandomOrderByRand ( )
	    {
		global	$Limit ;
		
		$query	=  "
				SELECT * 
				FROM random_table 
				WHERE
					random_table. access_count IN
					   (
						SELECT MIN(access_count) FROM random_table
					    )
				ORDER BY RAND() 
				LIMIT $Limit 
			   " ;

		SafeQuery ( $query ) ;
	     }
	     
	 function  RandomOrderByRand ( $count, $limit )
	   {
		global	$Timer ;
		
		// This method is very costly so we will divide the number of records in the table by the number of selects to be executed,
		// then by 10 just to give a clue of how costly this method is
		$total_records	=  GetRecordCount ( "random_table" ) ;
		$count		=  $total_records / $count / 10 ;
		
		if  ( $count  <  1 )
			$count = 1 ;
		else if  ( $count  >  10 )
			$count = 10 ;
		
		SafeStart ( ) ;
		$Timer -> Iterate ( "[B] SELECT ... ORDER BY RAND() LIMIT 1", "__RandomOrderByRand", $count, 
					array ( 'select-count' => $count, 'limit' => $limit ) ) ;
	    }
	    
	  
	/*==============================================================================================================

	    RandomOrderByVariables -
		Times execution of parameterized query.

	  ==============================================================================================================*/
	 function  __RandomOrderByVariables ( )
	    {
		global	$Limit ;
		
		$query	=  "
				SELECT  Selection.*
				FROM    
				   (
					SELECT  
						@count		:=  COUNT(*) + 1,
						@min_access	:=  MIN(access_count),
               					@limit		:=  $Limit
					FROM    random_table
				   ) AS variables
				STRAIGHT_JOIN
				   (
					SELECT  
						random_table.*,
						@limit := @limit - 1
					FROM    random_table
					WHERE   ( @count := @count - 1 )
						AND RAND() < @limit / @count
					) AS Selection
			   " ;
			   
		SafeQuery ( $query ) ;
	     }
	     
	 function  RandomOrderByVariables ( $count, $limit )
	   {
		global	$Timer ;
		
		SafeStart ( ) ;
		$Timer -> Iterate ( "[B] SELECT using variables", "__RandomOrderByVariables", $count, 
					array ( 'select-count' => $count, 'limit' => $limit ) ) ;
	    }
	    
	  
	  
	/*==============================================================================================================

	    RandomOrderBySubQuery -
		Times execution of parameterized query.

	  ==============================================================================================================*/
	 function  __RandomOrderBySubQuery ( )
	    {
		global	$Limit ;
		
		$query	=  "
				SELECT * 
				FROM random_table 
				WHERE 
					id >= FLOOR(1 + RAND() * ( SELECT MAX(id) FROM random_table ) ) 
				LIMIT $Limit
			   " ;
			   
		SafeQuery ( $query ) ;
	     }
	     
	 function  RandomOrderBySubQuery ( $count, $limit )
	   {
		global	$Timer ;
		
		SafeStart ( ) ;
		$Timer -> Iterate ( "[B] SELECT using SubQuery", "__RandomOrderBySubQuery", $count, 
					array ( 'select-count' => $count, 'limit' => $limit ) ) ;
	    }
	    
	  

	/*==============================================================================================================

	    RandomOrderSequential -
		Times execution of parameterized query.

	  ==============================================================================================================*/
	 function  __RandomOrderSequential ( )
	    {
		global	$Limit ;
		
		$query	=  "
				SELECT *
				FROM random_table AS random_1 
				JOIN
				  (
					SELECT 
					  (
						CAST(RAND() AS UNSIGNED) * 
						   (
							SELECT MAX(id) FROM random_table 
						    ) 
					    ) AS id 
				    ) AS random_2
				WHERE 
					random_1. id  >=  random_2. id
				ORDER BY random_1. id ASC
				LIMIT $Limit			   
			" ;
			   
		SafeQuery ( $query ) ;
	     }
	     
	 function  RandomOrderSequential ( $count, $limit )
	   {
		global	$Timer ;
		
		SafeStart ( ) ;
		$Timer -> Iterate ( "[B] SELECT sequential", "__RandomOrderBySubQuery", $count, 
					array ( 'select-count' => $count, 'limit' => $limit ) ) ;
	    }
	    
	  
	/*==============================================================================================================

	    Main program.

	  ==============================================================================================================*/
	$CL 		=  new CLParser ( $Definitions ) ;
	$Hostname	=  $CL -> hostname ;
	$Username	=  $CL -> username ;
	$Password	=  $CL -> password ;
	$Database	=  $CL -> database ;
	$Recreate	=  $CL -> recreate_tables ;
	$RecordCount	=  $CL -> record_count ;
	$RandomSelects	=  $CL -> select_count ;
	$Limit		=  $CL -> limit ;
	
	// Create a database connection
	$MySqli		=  new mysqli ( $Hostname, $Username, $Password, $Database ) ;
	
	if  ( $MySqli -> connect_errno )
		error ( "Database connection error #" . $MySqli -> connect_errno . ' : ' . $MySqli -> connect_error ) ;
		
	// Create the timer
	$Timer	=  new Timer ( false ) ;
	$Timer -> Start ( "Benchmarking for $RandomSelects random selects..." ) ;
	
	// Add custom columns
	$Timer -> AddCustomColumn ( array ( 'member' => 'select-count', 'title' => 'Selects', 'align' => 'right' ) ) ;
	$Timer -> AddCustomColumn ( array ( 'member' => 'limit'       , 'title' => 'Limit'  , 'align' => 'right' ) ) ;
	
	// Process table recreation if needed.
	if  ( $Recreate )
		RecreateTables ( ) ;
		
	// Run the benchmarks
	// TODO: algorithms with using CEIL() function
	RandomOrderByRand		( $RandomSelects, $Limit ) ;
	RandomOrderByVariables		( $RandomSelects, $Limit ) ;
	RandomOrderBySubQuery		( $RandomSelects, $Limit ) ;
	RandomOrderSequential		( $RandomSelects, $Limit ) ;
		
	// End of process : print the results
	$Timer -> Stop ( ) ;
	echo $Timer -> Report ( ) ;
