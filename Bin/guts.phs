<?php
	/**************************************************************************************************************
	
	    NAME
	        guts.phs
	
	    DESCRIPTION
	        Github management on multiple projects.
	
	    AUTHOR
	        Christian Vigh, 01/2016.
	
	    HISTORY
	        [Version : 1.0]		[Date : 2016-01-11]     [Author : CV]
	                Initial version.
	
	 **************************************************************************************************************/
	require ( "tools.phpinclude" ) ;

	use  Thrak\Processors\CL\CLParser ;
	use  Thrak\Processors\CL\CLException ;
	use  Thrak\Types\String ;
	use  Thrak\IO\Console ;
	use  Thrak\IO\Path ;
	use  Thrak\IO\AsciiReport ;
	use  Thrak\Processors\IniFile ;


	/*==================================================================================================

		Command line parameters.

	  ==================================================================================================*/
	$Definitions = <<<END
<command allow-files="false">

	<usage>
		Github management on multiple projects.
	</usage>
	
	<file name="configuration_file, cf" disposition="existing" default="thraktools://Data/guts.ini">
		Specifies the location of the guts configuration file.
	</file>

	<flag name="list, l">
		Lists currently defined projects, with pending changes.
	</flag>

	<flag name="list_porcelain_flags, lpf, porcelain_flags, pf">
		Lists the combinations of the first two characters of each line when "git status" is ran with
		the --porcelain flag.
	</flag>

	<flag name="status, s">
		Lists currently defined projects, with pending changes.
		The difference with the -list option is that only projects having pending changes will be listed.
	</flag>
	
</command>
END;


	/*==============================================================================================================

		Helper functions.        

	  ==============================================================================================================*/

	// execute_git_command -
	//	Executes the specified git command.
	function  execute_git_command ( $project_path, $command, &$output )
	   {
		$output		=  [] ;
		$cwd		=  getcwd ( ) ;
		chdir ( $project_path ) ;
		exec ( $command, $output, $status ) ;
		chdir ( $cwd ) ;

		return ( $status ) ;
	    }


	// get_project_settings -
	//	Returns settings associated with a project.
	function  get_project_settings ( $inifile, $key, $key_value, $project_sections )
	   {
		$project_data	=  [] ;

		if  ( ( $value = String::BooleanValue ( $key_value ) )  !==  null )
		   {
			if  ( ! $value )
				return ( false ) ;
			else
			   {
				$lckey	=  strtolower ( $key ) ;

				if  ( ! isset ( $project_sections [ $lckey ] ) )
					error ( "No section [Project : $key] exists" ) ;

				// Get project name, if different from the key specified in the [Projects] section
				$value				=  $inifile -> GetKey ( $project_sections [ $lckey ] [ 'section' ], 'Name' ) ;
				$project_data [ 'name' ]	=  ( $value ) ?  $value : $key ;

				// Get project path
				$value				=  $inifile -> GetKey ( $project_sections [ $lckey ] [ 'section' ], 'Path' ) ;

				if  ( ! $value )
					error ( "No Path key defined for project $key in section [{$project_sections [ $lckey ] [ 'section' ]}]" ) ;

				$project_data [ 'path' ]	=  $value ;

				// Get local repository name for local project (for project that have multiple sources but only one master)
				$value				=  $inifile -> GetKey ( $project_sections [ $lckey ] [ 'section' ], 
												'LocalRepository' ) ;

				if  ( $value )
					$repository		=  get_repository ( $project_data [ 'path' ], $value, 'push' ) ;
				else
					$repository		=  get_repository ( $project_data [ 'path' ], $project_data [ 'name' ], 'push' ) ;

				if  ( ! $repository )
					error ( "Project \"{$project [ 'name' ]}\" does not have valid remote(s)." ) ;

				$project_data [ 'local-repository' ]	=  $repository [ 'local' ] ;
				$project_data [ 'remote-repository' ]	=  $repository [ 'remote' ] ;

				// Get remote branch
				$project_data [ 'remote-branch' ]	=  $inifile -> GetKey ( $project_sections [ $lckey ] [ 'section' ], 
												'RemoteBranch',
												'master' ) ;
			    }
		    }
		else 
		   {
			$project_data [ 'name' ]		=  $key ;
			$project_data [ 'path' ]		=  $key_value ;
			$project_data [ 'local-repository']	=  $key ;
			$project_data [ 'remote-branch' ]	=  'master' ;
		    }

		// Check that the project path exists and contains a .git subdirectory
		if  ( ! is_dir ( $project_data [ 'path' ] ) ) 
			error ( "Path \"{$project_data [ 'path' ]}\" does not exist for project \"$key\"" ) ;

		if  ( ! is_dir ( $project_data [ 'path' ] . '/.git' ) ) 
			error ( "Path \"{$project_data [ 'path' ]}\" for project \"$key\" does not have a .git directory." ) ;

		// All done, return
		return ( $project_data ) ;
	    }


	// get_repositories -
	//	Gets the names of the repositories for the fetch and push operations.
	function  get_repositories ( $project_path )
	   {
		static		$re	=  '/
						(?P<local> [^\s]+)
						\s+
						(?P<remote> [^\s]+)
						\s+ \(
						(?P<keyword> [^)]+)
						\)
					    /imsx' ;

		execute_git_command ( $project_path, "git remote -v", $output ) ;
		$result		=  [] ;

		foreach  ( $output  as  $line )
		   {
			$line	=  trim ( $line ) ;

			if  ( ! $line )
				continue ;

			if  ( preg_match ( $re, $line, $match ) )
			   {
				$result []	=
				   [
					'local'		=>  $match [ 'local' ],
					'remote'	=>  $match [ 'remote' ],
					'operation'	=>  strtolower ( $match [ 'keyword' ] )
				    ] ;
			    }
		    }

		return ( $result ) ;
	    }

	function  get_repository ( $project_path, $repository, $operation )
	   {
		$result		=  get_repositories ( $project_path ) ;

		foreach  ( $result  as  $entry )
		   {
			if  ( ! strcasecmp ( $operation, $entry [ 'operation' ] )  &&  ! strcasecmp ( $repository, $entry [ 'local' ] ) )
				return ( $entry ) ;
		    }

		return ( false ) ;
	    }


	/*==============================================================================================================
	
	     ListRepositories -
		Lists the available repositories with their pending changes.
	
	  ==============================================================================================================*/
	function  ListRepositories ( $include_all )
	   {
		global		$ConfigurationData ;

		$data	=  [] ;

		// Loop through defined projects
		foreach ( $ConfigurationData [ 'projects' ]  as  $project )
		   {
			// Get current local repository status
			$status			=  execute_git_command ( $project [ 'path' ], "git status --porcelain", $output ) ;

			// Get the status of what is pushable - add potential entries to the list retrieved above, with the special modifier ">>"
			$local_repository	=  $project [ 'local-repository' ] ;
			$remote_branch		=  $project [ 'remote-branch' ] ;

			execute_git_command ( $project [ 'path' ], "git diff --name-only -- $local_repository/$remote_branch", $diff_output ) ;

			foreach  ( $diff_output  as  $file )
				$output []	=  ">> $file" ;

			// Collect the list of files to be updated/added/modified/deleted/pushed for this project
			$file_statuses	=  [] ;
			$file_names	=  [] ;

			foreach  ( $output  as  $line )
			   {
				$line	=  rtrim ( $line ) ;

				if  ( ! $line )
					continue ;

				$file_statuses []	=  '[' . substr ( $line, 0, 2 ) . ']' ;
				$file_names []		=  substr ( $line, 3 ) ;
			    }

			// Add current project to the report - only if we have to include them all or if there are pending updates
			if  ( count ( $file_names )  ||  $include_all )
			   {
				$data []	=
				   [
					'project'	=>  $project [ 'name' ],
					'path'		=>  $project [ 'path' ],
					'status'	=>  implode ( "\n", $file_statuses ),
					'file'		=>  implode ( "\n", $file_names )
				    ] ;
			    }
		    }

		// Generate the report
		$report		=  new AsciiReport
		   (
			[ 'member' => 'project'	, 'title' => 'Project'	],
			[ 'member' => 'path'	, 'title' => 'Path'	],
			[ 'member' => 'status'	, 'title' => 'State'	],
			[ 'member' => 'file'	, 'title' => 'File'	]
		    ) ;

		$extra_summary	=  ( $include_all ) ?
					'' : ' (' . count ( $ConfigurationData [ 'projects' ] ) . ' scanned)' ;

		echo $report -> Generate ( $data ) ;
		echo $report -> Summary ( 'project', '', $extra_summary ) ;
	    }

	
	/*==============================================================================================================
	
	    ListPorcelainFlags -
		Lists the combinations of the first two characters of each line when "git status" is ran with
		the --porcelain flag.
	
	  ==============================================================================================================*/
	function  ListPorcelainFlags ( )
	   {
		echo <<<END
Git file status help :

X           Y    Meaning
-------------------------------------------------
          [MD]   not updated
M        [ MD]   updated in index
A        [ MD]   added to index
D         [ M]   deleted from index
R        [ MD]   renamed in index
C        [ MD]   copied in index
[MARC]           index and work tree matches
[ MARC]     M    work tree changed since index
[ MARC]     D    deleted in work tree
-------------------------------------------------------------------
D           D    unmerged, both deleted
A           U    unmerged, added by us
U           D    unmerged, deleted by them
U           A    unmerged, added by them
D           U    unmerged, deleted by us
A           A    unmerged, both added
U           U    unmerged, both modified
-------------------------------------------------------------------
?           ?    untracked
!           !    ignored
>           >    waiting to be pushed on remote (guts-specific)
-------------------------------------------------------------------
END;
	    }


	/*==============================================================================================================
	
	    LoadConfiguration -
		Loads the configuration defined in guts.ini.
	
	  ==============================================================================================================*/
	function  LoadConfiguration ( $configuration_file )
	   {
		$data			=  [ 'projects' => [] ] ;
		$inifile		=  IniFile::LoadFromFile ( $configuration_file ) ;
		$inifile -> SetVariableStore ( 'Variables' ) ;

		// Retrieve project-specific parameters (section of type [Project : name])
		$sections		=  $inifile -> GetSections ( 'Project \s* : \s* (?P<name> [^\s]+)' ) ;
		$project_sections	=  [] ;

		foreach  ( $sections  as  $section )
		   {
			$project_name		=  $section [ 'match' ] [ 'name' ] ;
			$project_section	=  $section [ 'name' ] ;
			$project_keys		=  $inifile -> GetKeys ( $project_section ) ;

			$project_sections [ strtolower ( $project_name ) ]	=
			   [
				'name'		=>  $project_name,
				'section'	=>  $project_section,
				'keys'		=>  $project_keys 
			    ] ;
		    }

		// Retrieve project list 
		$projects		=  $inifile -> GetKeys ( 'Projects' ) ;

		foreach  ( $projects  as  $name => $value )
		   {
			$pdata	=  get_project_settings ( $inifile, $name, $value, $project_sections ) ;

			if  ( $pdata )
				$data [ 'projects' ] [ strtolower ( $name ) ]	=  $pdata ;
		    }

		ksort ( $data [ 'projects' ] ) ;
		return ( $data ) ;
	    }


	/*==================================================================================================

		Global constants and variables.

	  ==================================================================================================*/
	$CL 			=  new  CLParser ( $Definitions ) ;
	$ConfigurationFile	=  $CL -> configuration_file ;
	$List			=  $CL -> list ;
	$ListPorcelainFlags	=  $CL -> list_porcelain_flags ;
	$Status			=  $CL -> status ;

	$ConfigurationData	=  LoadConfiguration ( $ConfigurationFile ) ;
	$HadOption		=  false ;

	// -list option :
	//	Lists all repositories.
	if  ( ! $HadOption  &&  $List )
	   {
		ListRepositories ( true ) ;
		$HadOption	=  false ;
	    }

	// -list_porcelain_flags option :
	//	Lists the combinations of the first two characters of each line when "git status" is ran with
	//	the --porcelain flag.
	if  ( ! $HadOption  &&  $ListPorcelainFlags )
	   {
		ListPorcelainFlags ( ) ;
		$HadOption	=  false ;
	    }

	// -status option :
	//	Lists repositories having pending changes.
	if  ( ! $HadOption  &&  $Status )
	   {
		ListRepositories ( false ) ;
		$HadOption	=  false ;
	    }

