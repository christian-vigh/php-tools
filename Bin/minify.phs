<?php
	//!phpcmd(minify, 1.0, production) : Minifies source files
	/**************************************************************************************************************
	
	    NAME
	        minify.phs
	
	    DESCRIPTION
	        Minifies source files.
	
	    AUTHOR
	        Christian Vigh, 10/2015.
	
	    HISTORY
	    [Version : 1.0]	[Date : 2015/10/17]     [Author : CV]
	        Initial version.

	    [Version : 1.0.1]	[Date : 2015/10/25]     [Author : CV]
		. Corrected a bug where minified files where stored in the directory of the minify.phs script, not into
		  there original directory.
	
	 **************************************************************************************************************/
	require ( "tools.phpinclude" ) ;

	use  Thrak\Processors\CL\CLParser ;
	use  Thrak\Types\String ;
	use  Thrak\Types\String\Convert ;
	use  Thrak\IO\Console ;
	use  Thrak\IO\Path ;
	use  Thrak\IO\AsciiReport ;


	/*==============================================================================================================
	
	        Command-line definition.
	
	  ==============================================================================================================*/
	$Definitions = <<<END
<command allow-files="true" min-files="1">

	<usage>
		Minifies the specified source files.
	</usage>

	<string name="extension, e, x" default=".min">
		Specifies the extension to be inserted before the source file extension when creating the output file.
	</string>

	<directory name="output, o" disposition="here">
		Minified files will be written into the specified directory.
		If not specified, minified files will be generated into the directory where the files belong.
		This option cannot be used with the -stdout option.
	</directory>

	<flag name="force, f">
		Overrides destination files if they already exist.
		Cannot be used with the -update flag.
	</flag>

	<flag name="recursive, r">
		Recursively scans the specified directories.
	</flag>

	<flag name="stdout, s">
		Writes output to stdout.
		This option cannot be used with the -output option.
	</flag>

	<keyword name="type, t" default="all" arguments="1..*">
		Only selects files of the specified type(s), when using wildcards or the -recursive option.

		<case name="javascript, jscript, js">
			Javascript files.
		</case>

		<case name="css">
			Css files.
		</case>

		<case name="all, *">
			Selects all kinds of files.
		</case>
	</keyword>

	<flag name="update, u">
		Updates destination files if they are older than source files.
		Cannot be used with the -force flag.
	</flag>

	<exclude name="stdout" with="output"/>
	<exclude name="force"  with="update"/>
</command>
END;


	/*==================================================================================================

		Support functions.

	  ==================================================================================================*/

	// collect_files -
	//	Collect files from the specified directory.
	function  collect_files ( $path )
	   {
		$rs	=  opendir ( $path ) ;
		$result =  [] ;

		while  ( ( $subpath = readdir ( $rs ) ) )
		   {
			if  ( $subpath  ==  '.'  ||  $subpath  ==  '..' )
				continue ;

			$new_path	=  Path::RealPath ( "$path/$subpath" ) ;

			if  ( is_dir ( $new_path ) )
				$result	=  array_merge ( $result, collect_files ( $new_path ) ) ;
			else
				$result	=  array_merge ( $result, filter_files ( [ $new_path ] ) ) ;
		    }

		closedir ( $rs ) ;

		return ( $result ) ;
	    }


	// filter_files -
	//	Retain only files of the desired type in the list. Also set the corresponding class and output filename.
	function  filter_files ( $files )
	   {
		global		$AllowedExtensions, $Stdout, $Extension, $Output, $Forced, $Update ;


		$result		=  [] ;

		// Loop through the filenames supplied by the caller
		foreach  ( $files  as  $file )
		   {
			// Get file extension
			$extension	=  strtolower ( pathinfo ( $file, PATHINFO_EXTENSION ) ) ;

			// If we found an extension, then some further checkings may be needed 
			if  ( isset ( $AllowedExtensions [ $extension ] ) )
			   {
				$file		=  Path::ToUnix ( $file ) ;

				// Output is to go to stdout : no further checking needed
				if  ( $Stdout ) 
					$destination	=  null ;
				// Otherwise, build the output path - we'll have to check whether its last modification time
				// is older than the source file's one
				else
				   {
					if  ( $Output )
						$destination	=  "$Output/" . basename ( $file ) ;
					else  
						$destination	=  $file ;
					
					// Check if we have to add an extension string to the final path
					if  ( $Extension )
					   {
						$ext		=  pathinfo ( $destination, PATHINFO_EXTENSION ) ;
						$destination	=  preg_replace ( "/\.$ext$/", "$Extension.$ext", $destination ) ;
					    }

					$destination		=  Path::ToUnix ( Path::RealPath ( $destination, true ) ) ;

					// Forbid same source and output path
					if  ( ! strcmp ( $destination, $file ) )
						error ( "Output path cannot be the same as source path (file \"$file\")." ) ;

					// If not forced generation, then check that the destination file is older than the source one
					if  ( ! $Forced )
					   {
						if  (  file_exists ( $destination ) )
						   {
							if  ( $Update )
							   {
								if  ( filemtime ( $destination )  >=  filemtime ( $file ) )
									continue ;
							    }
							else
								warning ( "Destination file \"$destination\" already exists but is newer than " .
									  "\"$file\" ; specify either the -force or -update option." ) ;
						    }
					    }
				    }

				// This file can be minified
				$result []	=  
				   [ 
					'source'	=>  $file, 
					'destination'	=>  $destination,
					'class'		=>  $AllowedExtensions [ $extension ] 
				    ] ;
			    }
		    }

		// All done, return the list of files that can be minified
		return ( $result ) ;
	    }


	/*==================================================================================================

	    CollectExtensions -
		Collects all the extensions determined by the -type parameter.

	  ==================================================================================================*/
	function  CollectExtensions ( $defined, $types )
	   {
		$result		=  [] ;

		if  ( $types [0]  ==  'all' )
			$types	=  array_keys ( $defined ) ;

		foreach  ( $types  as  $type )
		   {
			if  ( isset ( $defined [ $type ] ) ) 
			   {
				foreach  ( $defined [ $type ] [ 'extensions' ]  as  $extension )
				   {
					$result [ strtolower ( $extension ) ] =  $defined [ $type ] [ 'class' ] ;
				    }
			    }
		    }

		return ( $result ) ;
	    }


	/*==================================================================================================

	    GetFiles -
		Collects files, either recursively or using wildcards.

	  ==================================================================================================*/
	function  GetFiles ( $source_paths, $recursive, &$files )
	   {
		foreach  ( $source_paths  as  $source_path )
		   {
			$subpaths	=  glob ( $source_path ) ;

			foreach  ( $subpaths  as  $path )
			   {
				if  ( ! file_exists ( $path ) )
					error ( "Path \"$path\" does not exist." ) ;

				if  ( $recursive )
				   {
					if  ( ! is_dir ( $path ) )
						error ( "Path \"$path\" is not a valid directory." ) ;
				
					$files	=  array_merge ( collect_files ( $path ) ) ;
				    }
				else if  ( is_dir ( $path ) )
					error ( "Path \"$path\" is a directory, not a file." ) ;
				else 
					$files	=  array_merge ( $files, filter_files ( glob ( $path ) ) ) ;
			    }
		    }

		usort ( $files, function ( $a, $b ) { return ( strcmp ( $a [ 'source' ], $b [ 'source' ] ) ) ; } ) ;
	    }


	/*==================================================================================================

	    ProcessFiles -
		Processes the collected files.

	  ==================================================================================================*/
	function  ProcessFiles ( $collected_files )
	   {
		foreach  ( $collected_files  as  $collected_file )
		   {
			$source		=  $collected_file [ 'source' ] ;
			$destination	=  $collected_file [ 'destination' ] ;
			$class		=  $collected_file [ 'class' ] ;
			$minifier	=  new $class ( ) ;
			$contents	=  $minifier -> MinifyFrom ( $source ) ;

			error_output ( $source . '(' . filesize ( $source ) . ' -> ' . strlen ( $contents ) . ')' ) ;

			dump ( $collected_files ) ;
			exit ;
			if  ( $destination )
				file_put_contents ( $destination, $contents ) ;
			else
				output ( $contents ) ;
		    }
	    }


	/*==================================================================================================

		Global constants and variables.

	  ==================================================================================================*/
	$DefinedExtensions		=
	   [
		'javascript'	=> [ 'class' => '\Thrak\Processors\Minifiers\JavascriptMinifier', 'extensions' => [ 'js'	] ],
		'css'		=> [ 'class' => '\Thrak\Processors\Minifiers\CssMinifier'	, 'extensions' => [ 'css'	] ]
	    ] ;

	$CL 				=  new CLParser ( $Definitions ) ;
	$Extension			=  $CL -> extension ;
	$Force				=  $CL -> force ;
	$Output				=  $CL -> output ;
	$Recursive			=  $CL -> recursive ;
	$Stdout				=  $CL -> stdout ;
	$Types				=  $CL -> type ;
	$Update				=  $CL -> update ;
	$Paths				=  $CL -> Files ;
	
	$HadOption			=  false ;


	/*==================================================================================================

		Main program.

	  ==================================================================================================*/

	// Collect file types
	$AllowedExtensions	=  CollectExtensions ( $DefinedExtensions, $Types ) ;

	// Then collect files
	$Files	=  [] ;
	GetFiles ( $Paths, $Recursive, $Files ) ;
	ProcessFiles ( $Files ) ;

