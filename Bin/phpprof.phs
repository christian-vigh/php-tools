<?php
	//!phpcmd(PHP, 2.0) : Profiles a PHP script.
	/***************************************************************************************************

	    NAME
		phpprof.phs

	    DESCRIPTION
		Profiles a PHP script.
	 
	    AUTHOR
	     	Christian Vigh, 10/2014.

	    HISTORY
	    [Version : 1.0]	[Date : 2014/10/12]	[Author : CV]
	     	Initial version.

	    [Version : 1.0.1]	[Date : 2015/09/25]	[Author : CV]
		. Modified after the introduction of the <command-line> parameter type in the CL package.

	 ***************************************************************************************************/
	define ( 'AUTOLOAD_REPORTING', 0 ) ;
	
	use  Thrak\Types\WhenSet ;
	use  Thrak\Types\IsSetAnd ;
	use  Thrak\Processors\CL\CLParser ;
	use  Thrak\Types\String ;
	use  Thrak\IO\Path ;
	use  Thrak\Windows\WShell ;
	use  Thrak\Types\FileSpecificationFormatter ;
	use  Thrak\Types\SpecializedFormatterDefinition ;
	
	require ( "tools.phpinclude" ) ;

	/*==============================================================================================================
	
		Command-line definitions.
	 
	  ==============================================================================================================*/
	$Definitions	=  <<<END
<command name="phpprof">
	<usage>
		Profiles a PHP script.
	</usage>
	
	<flag name="edit, e">
		When specified, the profiling data editor will be launched on the results after program execution.
	</flag>
	
	<string name="editor, ed">
		Profiling data editor executable.
	</string>
	
	<string name="editor_arguments, ea">
		Profiler editor arguments.
	</string>
	
	<file name="output, o" disposition="any" default="" required="false">
		XDebug profiler output file.
	</file>

	<unnamed>
		<command-line value-text="command [args...]" disposition="existing" ext=".php,.phs,.phpscript,.phs5">
			Command to be executed, followed by its optional arguments.
		</command-line>
	</unnamed>
</command>
END;
	
	
	/*==============================================================================================================

		Main program.
	
	  ==============================================================================================================*/
	$CL 			=  new CLParser ( $Definitions ) ;
	$Settings		=  $Configuration -> Get ( 'PhpTools/phpprof' ) ;
	$Remaining		=  $CL -> Files ;
	$Editor			=  WhenSet::GetValue ( $Settings, 'editor'		, ( $CL -> editor )		?  $CL -> editor : 'qcachegrind' ) ;
	$EditorArguments	=  WhenSet::GetValue ( $Settings, 'editor-arguments'	, ( $CL -> editor_arguments )	?  $CL -> editor_arguments : '' ) ;
	$OutputFormat		=  WhenSet::GetValue ( $Settings, 'output', '%f.xt' ) ;
	$OutputFile		=  $CL -> output ;
	$CommandLine		=  $CL -> UnnamedParameters [0] -> GetValue ( ) ;

	// Build the output filename
	if  ( $OutputFile )
	   {
		$OutputDir		=  pathinfo ( $OutputFile, PATHINFO_DIRNAME ) ;
		$OutputFile		=  pathinfo ( $OutputFile, PATHINFO_BASENAME ) ;
	    }
	else
	   {
		$OutputDir		=  pathinfo ( $OutputFormat, PATHINFO_DIRNAME ) ;
		$OutputFile		=  pathinfo ( $OutputFormat, PATHINFO_BASENAME ) ;
	    }

	if  ( ! $OutputDir )
		$OutputDir	=  "." ;
	
	// Process the output file template, if any was specified
	$path		=  $CommandLine [ 'full-command' ] ;
	$Formatter	=  new  FileSpecificationFormatter ( [ SpecializedFormatterDefinition::OneArgumentDefinition ( '%', 'f' ) ] ) ;
	$OutputFile	=  $Formatter -> Format ( $OutputFormat, [ basename ( $CommandLine [ 'name' ] ) ] ) ;
	$Output		=  basename ( $OutputFile ) ;

	// Build the command line
	$command	=  "php -e -d \"xdebug.profiler_output_dir=$OutputDir\" -d \"xdebug.profiler_output_name=$Output\" -d xdebug.profiler_enable=on " .
			   "    -d xdebug.extended_info=1 " .
			   "    $path" ;
	
	// Execute it
	output ( "Profiling       : $command" ) ;
	output ( "Profiler output : $OutputDir/$OutputFile" ) ;
	
	passthru ( $command ) ;
	
	// If the profiler output file exists, open the profiler
	if  ( $CL -> edit  &&  file_exists ( $OutputFile ) )
	   {
		$shell	=  new  WShell ( ) ;
		$shell -> Exec ( "$Editor $EditorArguments $OutputFile" ) ;
	    }